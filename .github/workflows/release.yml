name: release
on:
  workflow_call:
    secrets:
      NUGET_TOKEN:
        description: nuget.org access token
        required: true

env:
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: verify
        run: |
          echo "Verifying release commit is latest in the main branch"
          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
          git branch --remote --contains | grep "origin/main" || (echo "Commit is not found or not the latest in main branch" && exit 1)
          echo "Commit verified"
      - uses: actions/download-artifact@v2
        with:
          name: assemblies-${{ github.sha }}
          path: ./dist
      - uses: actions/download-artifact@v2
        with:
          name: nupkg-${{ github.sha }}
          path: ./dist
      - name: nuget
        if: contains(github.ref_name, '-') != 1
        run: dotnet nuget push ${FILE} --api-key ${NUGET_TOKEN}
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
          FILE: ./dist/Avolantis.Text.QueryString.*.nupkg
      - name: github
        run: dotnet nuget push ${FILE} --api-key ${GITHUB_TOKEN} --source ${GITHUB_SOURCE}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_SOURCE: https://nuget.pkg.github.com/avolantis/index.json
          FILE: ./dist/Avolantis.Text.QueryString.*.nupkg
      - name: prepare
        working-directory: dist
        run: |
          tar -czf $(basename -s .nupkg *.nupkg).tar.gz --exclude "$(basename *.nupkg)" .
          zip -r $(basename -s .nupkg *.nupkg).zip . -x "$(basename *.nupkg)" -x "$(basename *.tar.gz)"
      - name: reports
        uses: actions/download-artifact@v2
        with:
          name: reports-${{ github.sha }}
          path: ./test/coverage
      - name: release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            ./LICENSE.md
            ./README.md
            ./dist/*
            ./test/coverage/*
